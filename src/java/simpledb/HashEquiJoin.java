package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate p;
    private DbIterator child1, child2;
    private TupleDesc joinTD;
    transient private Tuple t1 = null;
    transient private Tuple t2 = null;
    private Iterator<Tuple> it;
    HashMap<Object, ArrayList<Tuple>> hashTable = new HashMap<Object, ArrayList<Tuple>>();

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	this.joinTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.joinTD;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
    	return this.child1.getTupleDesc().getFieldName(this.p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
    	return this.child2.getTupleDesc().getFieldName(this.p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	this.hashTable.clear();
    	child1.open();
    	Tuple t1 = null;            	
		while (child1.hasNext()) {
			t1 = child1.next();
            Field field = t1.getField(p.getField1());
            if (!this.hashTable.containsKey(field)) this.hashTable.put(field, new ArrayList<>());
            this.hashTable.get(field).add(t1);
        } 
        child2.open();
        super.open(); 
    }

    public void close() {
        // some code goes here
    	super.close();
        child2.close();
        child1.close();
        this.t1 = null;
        this.t2 = null;
        this.listIt = null;
        this.hashTable.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.child1.rewind();
        this.child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	Tuple t1 = null;    
    	while (true) {
                while (t2 == null) {
                    if (!child2.hasNext()) return null;
                    t2 = child2.next();
                    if (hashTable.containsKey(t2.getField(p.getField2()))) {
                        List<Tuple> tuples = hashTable.get(t2.getField(p.getField2()));
                        it = tuples.iterator();
                    } 
                    else t2 = null; 
                }
                if (it.hasNext()) {

                    t1 = it.next();
                    TupleDesc td1 = t1.getTupleDesc();
                    TupleDesc td2 = t2.getTupleDesc();
                    TupleDesc td = TupleDesc.merge(td1, td2);
                    Tuple t = new Tuple(td);
                    for (int i = 0; i < td1.numFields(); ++i)
                    	t.setField(i, t1.getField(i));
                    for (int i = 0; i < td2.numFields(); ++i)
                    	t.setField(td1.numFields() + i, t2.getField(i));
                    return t;
                } 
                else t2 = null;
            } 
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	return new DbIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
        this.child2 = children[1];
    }
    
}
